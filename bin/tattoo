#!/usr/bin/env node

const fs = require('fs');
const util = require('util');

const DATA_FILE = 'data/tattoo_picker.txt';
const FORBIDDEN_CHARACTERS = '#<>[]|{}';
const TATTOO_TYPES = ['Unknown', 'Custom', 'Other', 'Item', 'Ascension', 'Outfit'];

class Abort extends Error {}

function encodeWikiTitle(title) {
  if (title instanceof Array) {
    return `${encodeWikiTitle(title[0])}#${encodeWikiTitle(title[1])}`;
  }

  for (const c of FORBIDDEN_CHARACTERS) {
    if (title.includes(c)) {
      throw new Abort(`'${c}' is not allowed in wiki article titles.`);
    }
  }

  return encodeURIComponent(upcaseFirstLetter(title).replace(/ /g, '_'));
}

async function addRow(file, row) {
  // We'll be writing back so the same file, so read the entire thing into memory.
  const input = fs.readFileSync(file, { encoding: 'ascii' });

  if (new RegExp(`^${row[0]}\t`, 'm').test(input)) {
    throw new Abort(`A row for '${row[0]}' already exists.`);
  }

  const output = fs.createWriteStream(file, { encoding: 'ascii' });

  await writeRow(input, util.promisify(output.write).bind(output), row);

  output.end();
}

async function replaceRow(file, row) {
  // We'll be writing back so the same file, so read the entire thing into memory.
  const input = fs.readFileSync(file, { encoding: 'ascii' });

  if (!new RegExp(`^${row[0]}\t`, 'm').test(input)) {
    throw new Abort(`No existing row for '${row[0]}'.`);
  }

  const output = fs.createWriteStream(file, { encoding: 'ascii' });

  await writeRow(input, util.promisify(output.write).bind(output), row);

  output.end();
}

async function writeRow(input, write, row) {
  let written = false;

  // The data file always has a trailing newline, which results in a final
  // blank line in the input.  If that line were written back out, another
  // newline would be introduced.  The `slice()` below trims that final blank
  // line, preventing those additional newlines from being added.
  for (const line of input.split('\n').slice(0, -1)) {
    // Pass through comments and blank lines.
    if (line.length == 0 || line[0] === '#') {
      await write(line);
      await write('\n');

      continue;
    }

    const sigil = line.split('\t')[0];

    if (sigil === row[0]) {
      console.log(`Replacing existing row for '${sigil}'.`);

      await write(row.join('\t'));
      await write('\n');

      written = true;
    } else if (!written && sigil > row[0]) {
      console.log(`Inserting '${row[0]}' before '${sigil}'.`);

      await write(row.join('\t'));
      await write('\n');
      await write(line);
      await write('\n');

      written = true;
    } else {
      await write(line);
      await write('\n');
    }
  }

  if (!written) {
    console.log(`Appending '${row[0]}'.`);

    await write(row.join('\t'));
    await write('\n');
  }
}

function buildLine(sigil, type_, ...args) {
  const type = upcaseFirstLetter(type_);
  const line = [sigil, sigil, type];

  switch (type) {
    case 'Unknown':
      // Unknown tattoos are allowed to specify no additional data, in which case
      // the relay script will construct defaults.
      if (args.length) {
        line.push(args[0]);

        if (args.length > 1) {
          // Don't require the last "parameter" to be quoted, in case it's convenient.
          line.push(args.slice(1).join(' '));
        } else {
          // If no wiki page is provided, use the title again.  It will be encoded before use.
          line.push(args[0]);
        }
      }

      break;

    case 'Custom':
      if (args.length > 0) {
        throw new Abort('Custom tattoos don\'t take any parameters.');
      }

      line.push(`Your custom tattoo!`, ['Tattoos', 'Custom Tattoos']);
      break;

    case 'Other':
    case 'Ascension':
      // These tattoo types have no reasonable default for the wiki page, so must be fully specified.
      if (args.length < 2) {
        throw new Abort(`You must specify both a title and a wiki page for ${type} tattoos.`);
      }

      // Don't require the last "parameter" to be quoted, in case it's convenient.
      line.push(args[0], args.slice(1).join(' '));

      break;

    case 'Item':
    case 'Outfit':
      // These tattoo types use their title as the wiki page.
      if (args.length < 1) {
        throw new Abort('You must specify a tattoo title.');
      }

      // Don't require the last "parameter" to be quoted, in case it's convenient.
      const title = args.slice(0).join(' ');

      // Include the wiki article title so that it doesn't have to be calculated at runtime.
      line.push(title, title);

      break;

    default:
      throw new Abort(`'${type}' is not a recognized tattoo type.  Please use one of: ${TATTOO_TYPES.join(', ')}.`);
  }

  return line;
}

function upcaseFirstLetter(string) {
  return `${string[0].toUpperCase()}${string.substring(1)}`;
}

async function main(args) {
  try {
    if (args.length < 1) {
      throw new Abort('You must specify at least the name of the sigil to add or update.');
    }

    if (args[0] === '--bulk') {
      for (const sigil of args.slice(1)) {
        try {
          await addRow(DATA_FILE, [sigil, sigil]);
        } catch (ex) {
          if (!(ex instanceof Abort)) {
            throw ex;
          }

          // Ignore aborts.
        }
      }
    } else if (args.length === 1) {
      await addRow(DATA_FILE, [args[0], args[0]]);
    } else  {
      const line = buildLine(...args);

      if (line[4]) {
        line[4] = encodeWikiTitle(line[4]);
      }

      await replaceRow(DATA_FILE, line);
    }
  } catch (ex) {
    if (ex instanceof Abort) {
      console.error(ex.message);
      process.exit(1);
    }

    throw ex;
  }
}

main(process.argv.slice(2));
