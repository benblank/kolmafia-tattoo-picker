#!/usr/bin/env node

const fs = require('fs');

const DATA_FILE = 'data/tattoo_picker.txt';
const FORBIDDEN_CHARACTERS = '#<>[]|{}';
const TATTOO_TYPES = ['Unknown', 'Custom', 'Other', 'Item', 'Ascension', 'Outfit'];

function encodeWikiTitle(title) {
  if (title instanceof Array) {
    return `${encodeWikiTitle(title[0])}#${encodeWikiTitle(title[1])}`;
  }

  for (const c of FORBIDDEN_CHARACTERS) {
    if (title.includes(c)) {
      console.error(`'${c}' is not allowed in wiki article titles.`);
      process.exit(1);
    }
  }

  return encodeURIComponent(upcaseFirstLetter(title).replace(/ /g, '_'));
}

function addRow(file, row) {
  // We'll be writing back so the same file, so read the entire thing into memory.
  const input = fs.readFileSync(file, { encoding: 'ascii' });

  if (new RegExp(`^${row[0]}\t`, 'm').test(input)) {
    console.error(`A row for '${row[0]}' already exists.`);
    process.exit(1);
  }

  writeRow(input, fs.createWriteStream(file, { encoding: 'ascii' }), row);
}

function replaceRow(file, row) {
  // We'll be writing back so the same file, so read the entire thing into memory.
  const input = fs.readFileSync(file, { encoding: 'ascii' });

  if (!new RegExp(`^${row[0]}\t`, 'm').test(input)) {
    console.error(`No existing row for '${row[0]}'.`);
    process.exit(1);
  }

  writeRow(input, fs.createWriteStream(file, { encoding: 'ascii' }), row);
}

function writeRow(input, output, row) {
  let written = false;

  // The data file always has a trailing newline, which results in a final
  // blank line in the input.  If that line were written back out, another
  // newline would be introduced.  The `slice()` below trims that final blank
  // line, preventing those additional newlines from being added.
  for (const line of input.split('\n').slice(0, -1)) {
    // Pass through comments and blank lines.
    if (line.length == 0 || line[0] === '#') {
      output.write(line);
      output.write('\n');

      continue;
    }

    const sigil = line.split('\t')[0];

    if (sigil === row[0]) {
      console.log(`Replacing existing row for '${sigil}'.`);

      output.write(row.join('\t'));
      output.write('\n');

      written = true;
    } else if (!written && sigil > row[0]) {
      console.log(`Inserting '${row[0]}' before '${sigil}'.`);

      output.write(row.join('\t'));
      output.write('\n');
      output.write(line);
      output.write('\n');

      written = true;
    } else {
      output.write(line);
      output.write('\n');
    }
  }

  if (!written) {
    console.log(`Appending '${row[0]}'.`);

    output.write(row.join('\t'));
    output.write('\n');
  }
}

function buildLine(sigil, type_, ...args) {
  const type = upcaseFirstLetter(type_);
  const line = [sigil, sigil, type];

  switch (type) {
    case 'Unknown':
      // Unknown tattoos are allowed to specify no additional data, in which case
      // the relay script will construct defaults.
      if (args.length) {
        line.push(args[0]);

        if (args.length > 1) {
          // Don't require the last "parameter" to be quoted, in case it's convenient.
          line.push(args.slice(1).join(' '));
        } else {
          // If no wiki page is provided, use the title again.  It will be encoded before use.
          line.push(args[0]);
        }
      }

      break;

    case 'Custom':
      if (args.length > 0) {
        console.error('Custom tattoos don\'t take any parameters.');
        process.exit(1);
      }

      line.push(`Your custom tattoo!`, ['Tattoos', 'Custom Tattoos']);
      break;

    case 'Other':
    case 'Ascension':
      // These tattoo types have no reasonable default for the wiki page, so must be fully specified.
      if (args.length < 2) {
        console.error(`You must specify both a title and a wiki page for ${type} tattoos.`);
        process.exit(1);
      }

      // Don't require the last "parameter" to be quoted, in case it's convenient.
      line.push(args[0], args.slice(1).join(' '));

      break;

    case 'Item':
    case 'Outfit':
      // These tattoo types use their title as the wiki page.
      if (args.length < 1) {
        console.error('You must specify a tattoo title.');
        process.exit(1);
      }

      // Don't require the last "parameter" to be quoted, in case it's convenient.
      const title = args.slice(0).join(' ');

      // Include the wiki article title so that it doesn't have to be calculated at runtime.
      line.push(title, title);

      break;

    default:
      console.error(`'${type}' is not a recognized tattoo type.  Please use one of: ${TATTOO_TYPES.join(', ')}.`);
      process.exit(1);
  }

  return line;
}

function upcaseFirstLetter(string) {
  return `${string[0].toUpperCase()}${string.substring(1)}`;
}

if (process.argv.length < 3) {
  console.error('You must specify at least the name of the sigil to add or update.');
  process.exit(1);
}

if (process.argv.length === 3) {
  addRow(DATA_FILE, [process.argv[2], process.argv[2]]);
} else {
  const line = buildLine(...process.argv.slice(2));

  if (line[4]) {
    line[4] = encodeWikiTitle(line[4]);
  }

  replaceRow(DATA_FILE, line);
}
